# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateComment {
  count: CommentCountAggregate
  max: CommentMaxAggregate
  min: CommentMinAggregate
}

type AggregatePost {
  count: PostCountAggregate
  max: PostMaxAggregate
  min: PostMinAggregate
}

type AggregateUser {
  avg: UserAvgAggregate
  count: UserCountAggregate
  max: UserMaxAggregate
  min: UserMinAggregate
  sum: UserSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  count: NestedIntFilter
  equals: Boolean
  max: NestedBoolFilter
  min: NestedBoolFilter
  not: NestedBoolWithAggregatesFilter
}

type Comment {
  author: User!
  createdAt: DateTime!
  id: String!
  post: Post!
  postId: String!
  text: String!
  updatedAt: DateTime!
  userId: String!
}

type CommentCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  postId: Int!
  text: Int!
  updatedAt: Int!
  userId: Int!
}

input CommentCreateInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  createdAt: DateTime
  id: String
  post: PostCreateNestedOneWithoutCommentsInput!
  text: String!
  updatedAt: DateTime
}

input CommentCreateManyAuthorInput {
  createdAt: DateTime
  id: String
  postId: String!
  text: String!
  updatedAt: DateTime
}

input CommentCreateManyAuthorInputEnvelope {
  data: [CommentCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyInput {
  createdAt: DateTime
  id: String
  postId: String!
  text: String!
  updatedAt: DateTime
  userId: String!
}

input CommentCreateManyPostInput {
  createdAt: DateTime
  id: String
  text: String!
  updatedAt: DateTime
  userId: String!
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
}

input CommentCreateNestedManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
}

input CommentCreateOrConnectWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  createdAt: DateTime
  id: String
  post: PostCreateNestedOneWithoutCommentsInput!
  text: String!
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  createdAt: DateTime
  id: String
  text: String!
  updatedAt: DateTime
}

type CommentGroupBy {
  count: CommentCountAggregate
  createdAt: DateTime!
  id: String!
  max: CommentMaxAggregate
  min: CommentMinAggregate
  postId: String!
  text: String!
  updatedAt: DateTime!
  userId: String!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  createdAt: DateTime
  id: String
  postId: String
  text: String
  updatedAt: DateTime
  userId: String
}

type CommentMinAggregate {
  createdAt: DateTime
  id: String
  postId: String
  text: String
  updatedAt: DateTime
  userId: String
}

input CommentOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  text: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum CommentScalarFieldEnum {
  createdAt
  id
  postId
  text
  updatedAt
  userId
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  postId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  postId: StringWithAggregatesFilter
  text: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input CommentUpdateInput {
  author: UserUpdateOneRequiredWithoutCommentsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutAuthorInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutPostInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutPostInput {
  author: UserUpdateOneRequiredWithoutCommentsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  author: UserRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  post: PostRelationFilter
  postId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input CommentWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  avg: NestedFloatNullableFilter
  count: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  max: NestedIntNullableFilter
  min: NestedIntNullableFilter
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
  sum: NestedIntNullableFilter
}

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  createManyComment(data: [CommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertPost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  count: NestedIntFilter
  equals: Boolean
  max: NestedBoolFilter
  min: NestedBoolFilter
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  avg: NestedFloatNullableFilter
  count: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  max: NestedIntNullableFilter
  min: NestedIntNullableFilter
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
  sum: NestedIntNullableFilter
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

type Post {
  author: User!
  authorId: String!
  body: String!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  id: String!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

type PostCountAggregate {
  _all: Int!
  authorId: Int!
  body: Int!
  createdAt: Int!
  id: Int!
  published: Int!
  title: Int!
  updatedAt: Int!
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput!
  body: String!
  comments: CommentCreateNestedManyWithoutPostInput
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyAuthorInput {
  body: String!
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyInput {
  authorId: String!
  body: String!
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  body: String!
  comments: CommentCreateNestedManyWithoutPostInput
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateNestedOneWithoutPostsInput!
  body: String!
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

type PostGroupBy {
  authorId: String!
  body: String!
  count: PostCountAggregate
  createdAt: DateTime!
  id: String!
  max: PostMaxAggregate
  min: PostMinAggregate
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  authorId: String
  body: String
  createdAt: DateTime
  id: String
  published: Boolean
  title: String
  updatedAt: DateTime
}

type PostMinAggregate {
  authorId: String
  body: String
  createdAt: DateTime
  id: String
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostOrderByInput {
  authorId: SortOrder
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  authorId
  body
  createdAt
  id
  published
  title
  updatedAt
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  authorId: StringFilter
  body: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  authorId: StringWithAggregatesFilter
  body: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  published: BoolWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  body: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateOneRequiredWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  body: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithoutCommentsInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  body: StringFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByComment(by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [CommentGroupBy!]!
  groupByPost(by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [PostGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  age: Int
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  updatedAt: DateTime!
}

type UserAvgAggregate {
  age: Float
}

type UserCountAggregate {
  _all: Int!
  age: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  updatedAt: Int!
}

input UserCreateInput {
  age: Int
  comments: CommentCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  lastName: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
}

input UserCreateManyInput {
  age: Int
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentsInput {
  age: Int
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  lastName: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
}

input UserCreateWithoutPostsInput {
  age: Int
  comments: CommentCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
}

type UserGroupBy {
  age: Int
  avg: UserAvgAggregate
  count: UserCountAggregate
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  max: UserMaxAggregate
  min: UserMinAggregate
  sum: UserSumAggregate
  updatedAt: DateTime!
}

type UserMaxAggregate {
  age: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  updatedAt: DateTime
}

type UserMinAggregate {
  age: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  updatedAt: DateTime
}

input UserOrderByInput {
  age: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  age
  createdAt
  email
  firstName
  id
  lastName
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  age: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregate {
  age: Int
}

input UserUpdateInput {
  age: NullableIntFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  age: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentsInput {
  age: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  age: NullableIntFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  age: IntNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
