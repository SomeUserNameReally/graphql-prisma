# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Comment {
  author: User!
  createdAt: DateTime!
  id: String!
  post: Post!

  """@onDelete(SET_NULL)"""
  postId: String!
  text: String!
  updatedAt: DateTime!

  """@onDelete(SET_NULL)"""
  userId: String!
}

input CommentCreateManyAuthorInput {
  createdAt: DateTime
  id: String
  postId: String!
  text: String!
  updatedAt: DateTime
}

input CommentCreateManyAuthorInputEnvelope {
  data: [CommentCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyPostInput {
  createdAt: DateTime
  id: String
  text: String!
  updatedAt: DateTime
  userId: String!
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
}

input CommentCreateNestedManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
}

input CommentCreateOrConnectWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  createdAt: DateTime
  id: String
  post: PostCreateNestedOneWithoutCommentsInput!
  text: String!
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  createdAt: DateTime
  id: String
  text: String!
  updatedAt: DateTime
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  postId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

type CommentSubscriptionPayload {
  comment: Comment!
  mutation: String!
}

input CommentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutAuthorInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutPostInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutPostInput {
  author: UserUpdateOneRequiredWithoutCommentsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  deletePost(where: PostWhereUniqueInput!): Post!
  deleteUser(where: UserWhereUniqueInput!): User
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

type Post {
  """@onDelete(SET_NULL)"""
  authorId: String!
  body: String!
  createdAt: DateTime!
  id: String!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput!
  body: String!
  comments: CommentCreateNestedManyWithoutPostInput
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyAuthorInput {
  body: String!
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  body: String!
  comments: CommentCreateNestedManyWithoutPostInput
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateNestedOneWithoutPostsInput!
  body: String!
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  authorId: StringFilter
  body: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type PostSubscriptionPayload {
  data: Post!
  mutation: SubscriptionMutationPayload!
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  body: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateOneRequiredWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  body: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithoutCommentsInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsInput!
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  comments(query: String): [Comment]!
  posts(query: String): [Post]!
  users(query: String): [User]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  comment(post: String!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

"""Possible subscription mutation states."""
enum SubscriptionMutationPayload {
  CREATED
  DELETED
  UPDATED
}

type User {
  age: Int
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  posts: [Post]!
  updatedAt: DateTime!
}

input UserCreateInput {
  age: Int
  comments: CommentCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  lastName: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentsInput {
  age: Int
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  lastName: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
}

input UserCreateWithoutPostsInput {
  age: Int
  comments: CommentCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
}

input UserUpdateInput {
  age: NullableIntFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentsInput {
  age: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  age: NullableIntFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserWhereUniqueInput {
  email: String
  id: String
}
